import tkinter as tk
from tkinter import ttk, messagebox
from database.db_operations import query_real_time, view_statistics, view_total_energy_generation, compare_energy_source_efficiency, alert_low_generation

def setup_gui():
    def query_device_consumption():
        device_id = device_id_var.get()
        data = query_real_time(device_id=device_id)
        if data:
            messagebox.showinfo("Real-time Device Data", f"Device ID: {data[1]}\nTimestamp: {data[2]}\nPower Consumption: {data[3]:.2f} watts")
        else:
            messagebox.showwarning("No Data", "No data available for the specified device.")

    def view_device_statistics():
        device_id = device_id_var.get()
        avg, peak = view_statistics(device_id=device_id)
        messagebox.showinfo("Device Statistics", f"Average Power Consumption: {avg:.2f} watts\nPeak Power Consumption: {peak:.2f} watts")

    def query_total_generation():
        energy_source = energy_source_var.get()
        total_generated = view_total_energy_generation(energy_source)
        messagebox.showinfo("Total Energy Generation", f"Total Energy Generated by {energy_source}: {total_generated:.2f} watts")

    def compare_efficiency():
        efficiency_data = compare_energy_source_efficiency()
        efficiency_message = "\n".join([f"{source}: {efficiency:.2f} watts average" for source, efficiency in efficiency_data])
        messagebox.showinfo("Energy Source Efficiency", efficiency_message)

    def alert_low_generation_call():
        threshold = float(threshold_var.get())
        low_generation_sources = alert_low_generation(threshold)
        if low_generation_sources:
            alert_message = "\n".join([f"{source}: {avg_generation:.2f} watts average" for source, avg_generation in low_generation_sources])
            messagebox.showwarning("Low Energy Generation Alert", alert_message)
        else:
            messagebox.showinfo("All Sources", "All sources are generating above the threshold.")

    root = tk.Tk()
    root.title("Energy Monitoring System")

    mainframe = ttk.Frame(root, padding="10")
    mainframe.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

    # Device Queries Section
    ttk.Label(mainframe, text="Device ID:").grid(row=1, column=1, sticky=tk.W)
    device_id_var = tk.StringVar()
    device_id_combobox = ttk.Combobox(mainframe, textvariable=device_id_var, values=["TV", "Fan", "Air Conditioner"])
    device_id_combobox.grid(row=1, column=2, sticky=(tk.W, tk.E))
    device_id_combobox.set("TV")

    ttk.Button(mainframe, text="Query Device Consumption", command=query_device_consumption).grid(row=2, column=1, columnspan=2, sticky=(tk.W, tk.E))
    ttk.Button(mainframe, text="View Device Statistics", command=view_device_statistics).grid(row=3, column=1, columnspan=2, sticky=(tk.W, tk.E))

    # Energy Source Queries Section
    ttk.Label(mainframe, text="Energy Source:").grid(row=4, column=1, sticky=tk.W)
    energy_source_var = tk.StringVar()
    energy_source_combobox = ttk.Combobox(mainframe, textvariable=energy_source_var, values=["solar", "wind turbine", "storage battery", "grid"])
    energy_source_combobox.grid(row=4, column=2, sticky=(tk.W, tk.E))
    energy_source_combobox.set("grid")

    ttk.Button(mainframe, text="Query Total Generation", command=query_total_generation).grid(row=5, column=1, columnspan=2, sticky=(tk.W, tk.E))
    ttk.Button(mainframe, text="Compare Efficiency", command=compare_efficiency).grid(row=6, column=1, columnspan=2, sticky=(tk.W, tk.E))

    # Alert Section
    ttk.Label(mainframe, text="Alert Threshold:").grid(row=7, column=1, sticky=tk.W)
    threshold_var = tk.StringVar(value="100")
    ttk.Entry(mainframe, textvariable=threshold_var).grid(row=7, column=2, sticky=(tk.W, tk.E))

    ttk.Button(mainframe, text="Alert Low Generation", command=alert_low_generation_call).grid(row=8, column=1, columnspan=2, sticky=(tk.W, tk.E))

    root.mainloop()